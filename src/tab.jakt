import view_implementation { ViewImpl }

import extern c "Elementary.h" before_include define { EFL_BETA_API_SUPPORT = "1" }
import extern c "Efl_Ui.h" before_include define { EFL_BETA_API_SUPPORT = "1" }

struct TabPager {
    widget: raw _Eo_Opaque
    items: [raw _Eo_Opaque]
    views: [ViewImpl]
    active: usize? = None

    fn create(anon parent: raw _Eo_Opaque, top_bar_height: c_int) throws -> TabPager
    {
        let added = _efl_add_internal_start(
            file: "".c_string(), line: 0
            klass_id: efl_ui_tab_pager_class_get()
            parent
            ref: EINA_FALSE
            is_fallback: EINA_FALSE
        )
        efl_gfx_hint_weight_set(added, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND)
        efl_gfx_hint_align_set(added, EVAS_HINT_FILL, 0.0)
        efl_gfx_hint_size_max_set(added, _Eina_Size2D(w: -1, h: top_bar_height))
        let tab_pager = _efl_add_end(added, is_ref: EINA_FALSE, is_fallback: EINA_FALSE)

        evas_object_hide(tab_pager)

        return TabPager(widget: tab_pager, items: [], views: [], active: None)
    }

    fn add_tab(mut this, title: String, icon: String? = None) throws -> usize
    {
        let added_tab = _efl_add_internal_start(
            file: "".c_string(), line: 0
            klass_id: efl_ui_tab_page_class_get()
            parent: .widget
            ref: EINA_FALSE
            is_fallback: EINA_FALSE
        )
        let tab = _efl_add_end(added_tab, is_ref: EINA_FALSE, is_fallback: EINA_FALSE)

        let item = efl_ui_tab_page_tab_bar_item_get(tab)
        efl_text_set(item, title.c_string())
        if icon is Some(name) {
            efl_ui_tab_bar_default_item_icon_set(item, name.c_string())
        }

        efl_pack_end(.widget, tab)

        .items.push(tab)
        .views.push(ViewImpl::create())

        if .items.size() > 1 {
            evas_object_show(.widget)
        } else {
            evas_object_hide(.widget)
            .switch_to(.items.size() - 1)
        }

        return .items.size() - 1
    }

    fn switch_to(mut this, anon tab_id: usize)
    {
        if .active == Some(tab_id) {
            return
        }

        let item = efl_ui_tab_page_tab_bar_item_get(.items[tab_id])
        efl_ui_selectable_selected_set(item, EINA_TRUE)
        .active = tab_id
    }

    fn tab_item(this, anon tab_id: usize) -> raw _Eo_Opaque
    {
        return .items[tab_id]
    }

    fn current_view(this) -> ViewImpl { return .views[.active!] }

    fn navigate_to_html(mut this, anon html: String, anon url: String)
    {
        .current_view().load_html(&html, &url)
    }
}
